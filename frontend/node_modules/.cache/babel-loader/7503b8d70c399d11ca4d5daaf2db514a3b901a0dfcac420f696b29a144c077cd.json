{"ast":null,"code":"var _jsxFileName = \"/Users/porterrunyon-trapp/CS333/final-project/Final-cs333/frontend/src/components/Todo/TranslateComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranslateComponent = ({\n  originalText,\n  setOriginalText,\n  apiKey\n}) => {\n  _s();\n  const [translatedText, setTranslatedText] = useState('');\n  const [isTranslated, setIsTranslated] = useState(false);\n  const [isTranslating, setIsTranslating] = useState(false);\n  const translate = async (textToTranslate, targetLanguage) => {\n    setIsTranslating(true);\n    try {\n      const response = await axios.post('https://translation.googleapis.com/language/translate/v2', {}, {\n        params: {\n          q: textToTranslate,\n          target: targetLanguage,\n          key: apiKey\n        }\n      });\n      setIsTranslating(false);\n      return response.data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      setIsTranslating(false);\n      return '';\n    }\n  };\n  const handleTranslationClick = async () => {\n    if (isTranslating) {\n      return;\n    }\n    if (!isTranslated) {\n      const translated = await translate(originalText, 'ar');\n      setTranslatedText(translated);\n      setOriginalText(translated);\n      setIsTranslated(true);\n    } else {\n      setOriginalText(translatedText); // If already translated, switch back to original\n      setIsTranslated(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleTranslationClick,\n    disabled: isTranslating,\n    children: isTranslating ? 'Translating...' : isTranslated ? 'Revert to Original' : 'Translate to Arabic'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(TranslateComponent, \"rK0V2d896h5RC4ZKfLBhDGhXBzk=\");\n_c = TranslateComponent;\nexport default TranslateComponent;\nvar _c;\n$RefreshReg$(_c, \"TranslateComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","TranslateComponent","originalText","setOriginalText","apiKey","_s","translatedText","setTranslatedText","isTranslated","setIsTranslated","isTranslating","setIsTranslating","translate","textToTranslate","targetLanguage","response","post","params","q","target","key","data","translations","error","console","handleTranslationClick","translated","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/porterrunyon-trapp/CS333/final-project/Final-cs333/frontend/src/components/Todo/TranslateComponent.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst TranslateComponent = ({ originalText, setOriginalText, apiKey }) => {\n  const [translatedText, setTranslatedText] = useState('');\n  const [isTranslated, setIsTranslated] = useState(false);\n  const [isTranslating, setIsTranslating] = useState(false);\n\n  const translate = async (textToTranslate, targetLanguage) => {\n    setIsTranslating(true);\n    try {\n      const response = await axios.post(\n        'https://translation.googleapis.com/language/translate/v2',\n        {},\n        {\n          params: {\n            q: textToTranslate,\n            target: targetLanguage,\n            key: apiKey,\n          },\n        }\n      );\n      setIsTranslating(false);\n      return response.data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      setIsTranslating(false);\n      return '';\n    }\n  };\n\n  const handleTranslationClick = async () => {\n    if (isTranslating) {\n      return;\n    }\n\n    if (!isTranslated) {\n      const translated = await translate(originalText, 'ar');\n      setTranslatedText(translated);\n      setOriginalText(translated);\n      setIsTranslated(true);\n    } else {\n      setOriginalText(translatedText); // If already translated, switch back to original\n      setIsTranslated(false);\n    }\n  };\n\n  return (\n    <button onClick={handleTranslationClick} disabled={isTranslating}>\n      {isTranslating ? 'Translating...' : isTranslated ? 'Revert to Original' : 'Translate to Arabic'}\n    </button>\n  );\n};\n\nexport default TranslateComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,YAAY;EAAEC,eAAe;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACxE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMe,SAAS,GAAG,MAAAA,CAAOC,eAAe,EAAEC,cAAc,KAAK;IAC3DH,gBAAgB,CAAC,IAAI,CAAC;IACtB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAC/B,0DAA0D,EAC1D,CAAC,CAAC,EACF;QACEC,MAAM,EAAE;UACNC,CAAC,EAAEL,eAAe;UAClBM,MAAM,EAAEL,cAAc;UACtBM,GAAG,EAAEhB;QACP;MACF,CACF,CAAC;MACDO,gBAAgB,CAAC,KAAK,CAAC;MACvB,OAAOI,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAAChB,cAAc;IAC1D,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CZ,gBAAgB,CAAC,KAAK,CAAC;MACvB,OAAO,EAAE;IACX;EACF,CAAC;EAED,MAAMc,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAIf,aAAa,EAAE;MACjB;IACF;IAEA,IAAI,CAACF,YAAY,EAAE;MACjB,MAAMkB,UAAU,GAAG,MAAMd,SAAS,CAACV,YAAY,EAAE,IAAI,CAAC;MACtDK,iBAAiB,CAACmB,UAAU,CAAC;MAC7BvB,eAAe,CAACuB,UAAU,CAAC;MAC3BjB,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACLN,eAAe,CAACG,cAAc,CAAC,CAAC,CAAC;MACjCG,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACET,OAAA;IAAQ2B,OAAO,EAAEF,sBAAuB;IAACG,QAAQ,EAAElB,aAAc;IAAAmB,QAAA,EAC9DnB,aAAa,GAAG,gBAAgB,GAAGF,YAAY,GAAG,oBAAoB,GAAG;EAAqB;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzF,CAAC;AAEb,CAAC;AAAC5B,EAAA,CAjDIJ,kBAAkB;AAAAiC,EAAA,GAAlBjC,kBAAkB;AAmDxB,eAAeA,kBAAkB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}