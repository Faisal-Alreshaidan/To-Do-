{"ast":null,"code":"var _jsxFileName = \"/Users/porterrunyon-trapp/CS333/final-project/Final-cs333/frontend/src/components/Todo/TranslateComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranslateComponent = ({\n  text,\n  setText,\n  apiKey\n}) => {\n  _s();\n  const [isTranslated, setIsTranslated] = useState(false);\n  const [translation, setTranslation] = useState('');\n  const translateText = async (textToTranslate, targetLanguage) => {\n    try {\n      const response = await axios.post('https://translation.googleapis.com/language/translate/v2', {}, {\n        params: {\n          q: textToTranslate,\n          target: targetLanguage,\n          key: apiKey\n        }\n      });\n      return response.data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return textToTranslate;\n    }\n  };\n  const handleTranslationClick = async () => {\n    if (!isTranslated) {\n      // If not translated yet, translate the text\n      const translatedText = await translateText(text, 'ar');\n      setTranslation(translatedText); // Store the translation\n      setText(translatedText); // Update the text displayed in the parent component\n      setIsTranslated(true); // Update the state to reflect that text is now translated\n    } else {\n      // If already translated, revert to the original text\n      setText(text); // Revert the text displayed in the parent component\n      setIsTranslated(false); // Update the state to reflect that text is now original\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleTranslationClick,\n    children: isTranslated ? 'Revert to Original' : 'Translate to Arabic'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(TranslateComponent, \"QtmEFfvm4VBPuwYqDusroRI3cRc=\");\n_c = TranslateComponent;\nexport default TranslateComponent;\nvar _c;\n$RefreshReg$(_c, \"TranslateComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","TranslateComponent","text","setText","apiKey","_s","isTranslated","setIsTranslated","translation","setTranslation","translateText","textToTranslate","targetLanguage","response","post","params","q","target","key","data","translations","translatedText","error","console","handleTranslationClick","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/porterrunyon-trapp/CS333/final-project/Final-cs333/frontend/src/components/Todo/TranslateComponent.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst TranslateComponent = ({ text, setText, apiKey }) => {\n  const [isTranslated, setIsTranslated] = useState(false);\n  const [translation, setTranslation] = useState('');\n\n  const translateText = async (textToTranslate, targetLanguage) => {\n    try {\n      const response = await axios.post(\n        'https://translation.googleapis.com/language/translate/v2',\n        {},\n        {\n          params: {\n            q: textToTranslate,\n            target: targetLanguage,\n            key: apiKey\n          }\n        }\n      );\n      return response.data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return textToTranslate;\n    }\n  };\n\n  const handleTranslationClick = async () => {\n    if (!isTranslated) {\n      // If not translated yet, translate the text\n      const translatedText = await translateText(text, 'ar');\n      setTranslation(translatedText); // Store the translation\n      setText(translatedText); // Update the text displayed in the parent component\n      setIsTranslated(true); // Update the state to reflect that text is now translated\n    } else {\n      // If already translated, revert to the original text\n      setText(text); // Revert the text displayed in the parent component\n      setIsTranslated(false); // Update the state to reflect that text is now original\n    }\n  };\n\n  return (\n    <button onClick={handleTranslationClick}>\n      {isTranslated ? 'Revert to Original' : 'Translate to Arabic'}\n    </button>\n  );\n};\n\nexport default TranslateComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMa,aAAa,GAAG,MAAAA,CAAOC,eAAe,EAAEC,cAAc,KAAK;IAC/D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAC/B,0DAA0D,EAC1D,CAAC,CAAC,EACF;QACEC,MAAM,EAAE;UACNC,CAAC,EAAEL,eAAe;UAClBM,MAAM,EAAEL,cAAc;UACtBM,GAAG,EAAEd;QACP;MACF,CACF,CAAC;MACD,OAAOS,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAACC,cAAc;IAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAOX,eAAe;IACxB;EACF,CAAC;EAED,MAAMa,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI,CAAClB,YAAY,EAAE;MACjB;MACA,MAAMe,cAAc,GAAG,MAAMX,aAAa,CAACR,IAAI,EAAE,IAAI,CAAC;MACtDO,cAAc,CAACY,cAAc,CAAC,CAAC,CAAC;MAChClB,OAAO,CAACkB,cAAc,CAAC,CAAC,CAAC;MACzBd,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACzB,CAAC,MAAM;MACL;MACAJ,OAAO,CAACD,IAAI,CAAC,CAAC,CAAC;MACfK,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;EAED,oBACEP,OAAA;IAAQyB,OAAO,EAAED,sBAAuB;IAAAE,QAAA,EACrCpB,YAAY,GAAG,oBAAoB,GAAG;EAAqB;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEb,CAAC;AAACzB,EAAA,CA3CIJ,kBAAkB;AAAA8B,EAAA,GAAlB9B,kBAAkB;AA6CxB,eAAeA,kBAAkB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}