{"ast":null,"code":"var _jsxFileName = \"/Users/porterrunyon-trapp/CS333/final-project/Final-cs333/frontend/src/components/Todo/TranslateComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranslateComponent = ({\n  text,\n  apiKey\n}) => {\n  _s();\n  const [translatedText, setTranslatedText] = useState('');\n  const [isArabic, setIsArabic] = useState(false);\n  useEffect(() => {\n    // Reset translation when text changes\n    setTranslatedText(text);\n    setIsArabic(false);\n  }, [text]);\n  const translate = async (textToTranslate, targetLanguage) => {\n    if (!apiKey) {\n      console.error('API key for Google Translate is missing');\n      return textToTranslate;\n    }\n    try {\n      const response = await axios.post('https://translation.googleapis.com/language/translate/v2', {}, {\n        params: {\n          q: textToTranslate,\n          target: targetLanguage,\n          key: apiKey\n        }\n      });\n      return response.data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return `Error: Could not translate`; // Indicate error\n    }\n  };\n  const handleTranslationClick = async () => {\n    if (!text) {\n      return; // If there's no text, do nothing\n    }\n    const targetLanguage = isArabic ? 'en' : 'ar';\n    const translation = await translate(text, targetLanguage);\n    setTranslatedText(translation);\n    setIsArabic(!isArabic);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: translatedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranslationClick,\n      children: isArabic ? 'Translate to English' : 'Translate to Arabic'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(TranslateComponent, \"QcerkEJF39tcSJFjbzhBQYzYeB0=\");\n_c = TranslateComponent;\nexport default TranslateComponent;\nvar _c;\n$RefreshReg$(_c, \"TranslateComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TranslateComponent","text","apiKey","_s","translatedText","setTranslatedText","isArabic","setIsArabic","translate","textToTranslate","targetLanguage","console","error","response","post","params","q","target","key","data","translations","handleTranslationClick","translation","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/porterrunyon-trapp/CS333/final-project/Final-cs333/frontend/src/components/Todo/TranslateComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TranslateComponent = ({ text, apiKey }) => {\n  const [translatedText, setTranslatedText] = useState('');\n  const [isArabic, setIsArabic] = useState(false);\n\n  useEffect(() => {\n    // Reset translation when text changes\n    setTranslatedText(text);\n    setIsArabic(false);\n  }, [text]);\n\n  const translate = async (textToTranslate, targetLanguage) => {\n    if (!apiKey) {\n      console.error('API key for Google Translate is missing');\n      return textToTranslate;\n    }\n\n    try {\n      const response = await axios.post(\n        'https://translation.googleapis.com/language/translate/v2',\n        {},\n        {\n          params: {\n            q: textToTranslate,\n            target: targetLanguage,\n            key: apiKey\n          }\n        }\n      );\n      return response.data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return `Error: Could not translate`; // Indicate error\n    }\n  };\n\n  const handleTranslationClick = async () => {\n    if (!text) {\n      return; // If there's no text, do nothing\n    }\n\n    const targetLanguage = isArabic ? 'en' : 'ar';\n    const translation = await translate(text, targetLanguage);\n    setTranslatedText(translation);\n    setIsArabic(!isArabic);\n  };\n\n  return (\n    <div>\n      <div>{translatedText}</div>\n      <button onClick={handleTranslationClick}>\n        {isArabic ? 'Translate to English' : 'Translate to Arabic'}\n      </button>\n    </div>\n  );\n};\n\nexport default TranslateComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd;IACAS,iBAAiB,CAACJ,IAAI,CAAC;IACvBM,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;EAEV,MAAMO,SAAS,GAAG,MAAAA,CAAOC,eAAe,EAAEC,cAAc,KAAK;IAC3D,IAAI,CAACR,MAAM,EAAE;MACXS,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC;MACxD,OAAOH,eAAe;IACxB;IAEA,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAC/B,0DAA0D,EAC1D,CAAC,CAAC,EACF;QACEC,MAAM,EAAE;UACNC,CAAC,EAAEP,eAAe;UAClBQ,MAAM,EAAEP,cAAc;UACtBQ,GAAG,EAAEhB;QACP;MACF,CACF,CAAC;MACD,OAAOW,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAAChB,cAAc;IAC1D,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAQ,4BAA2B,CAAC,CAAC;IACvC;EACF,CAAC;EAED,MAAMS,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI,CAACpB,IAAI,EAAE;MACT,OAAO,CAAC;IACV;IAEA,MAAMS,cAAc,GAAGJ,QAAQ,GAAG,IAAI,GAAG,IAAI;IAC7C,MAAMgB,WAAW,GAAG,MAAMd,SAAS,CAACP,IAAI,EAAES,cAAc,CAAC;IACzDL,iBAAiB,CAACiB,WAAW,CAAC;IAC9Bf,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,oBACEP,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAMnB;IAAc;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3B5B,OAAA;MAAQ6B,OAAO,EAAEP,sBAAuB;MAAAE,QAAA,EACrCjB,QAAQ,GAAG,sBAAsB,GAAG;IAAqB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACxB,EAAA,CAtDIH,kBAAkB;AAAA6B,EAAA,GAAlB7B,kBAAkB;AAwDxB,eAAeA,kBAAkB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}