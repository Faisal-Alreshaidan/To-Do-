{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FAISA\\\\OneDrive\\\\Desktop\\\\CS336\\\\lab9-FaisalAziz1241\\\\frontend\\\\src\\\\components\\\\Weather\\\\Weather.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Weather.css'; // Make sure you have the CSS file with the necessary styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState('');\n  const API_KEY = 'NZFg01GFjycMlynXdI9PhAssjfKPnmeA'; // Replace with your actual API key\n\n  useEffect(() => {\n    const fetchWeatherByLocation = async (latitude, longitude) => {\n      try {\n        const response = await axios.get(`https://api.tomorrow.io/v4/timelines?location=${latitude},${longitude}&fields=temperature,windSpeed,humidity,weatherCode&timesteps=current&apikey=${API_KEY}`);\n        setWeatherData(response.data);\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    const getLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          // Fetch city name using reverse geocoding\n          try {\n            const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=YOUR_GOOGLE_MAPS_API_KEY`);\n            const cityName = response.data.results[0].address_components.find(component => component.types.includes('locality')).long_name;\n            setCity(cityName);\n            fetchWeatherByLocation(latitude, longitude);\n          } catch (error) {\n            console.error('Error fetching city name:', error);\n          }\n        }, error => {\n          console.error('Error getting geolocation:', error);\n        });\n      } else {\n        console.error('Geolocation is not supported by this browser.');\n      }\n    };\n    getLocation();\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  const formatDateTime = timestamp => {\n    const date = new Date(timestamp);\n    return {\n      date: `${date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric'\n      })}`,\n      time: `${date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit'\n      }).toLowerCase()}`\n    };\n  };\n  const formatTemperature = temperature => {\n    return temperature.toFixed(1); // Format temperature to have one decimal place\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-card\",\n    children: weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-time\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date\",\n          children: formatDateTime(weatherData.data.timelines[0].startTime).date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time\",\n          children: formatDateTime(weatherData.data.timelines[0].startTime).time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"temperature\",\n        children: [formatTemperature(weatherData.data.timelines[0].intervals[0].values.temperature), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city\",\n        children: city ? city : 'Your Current Location'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"description\",\n          children: \"Overcast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"humidity\",\n          children: [\"Humidity: \", weatherData.data.timelines[0].intervals[0].values.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wind\",\n          children: [\"Wind: \", weatherData.data.timelines[0].intervals[0].values.windSpeed, \" km/h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"DsqvnnlcFEIRcSFsBVRH0wDfhX8=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Weather","_s","weatherData","setWeatherData","city","setCity","API_KEY","fetchWeatherByLocation","latitude","longitude","response","get","data","error","console","getLocation","navigator","geolocation","getCurrentPosition","position","coords","cityName","results","address_components","find","component","types","includes","long_name","formatDateTime","timestamp","date","Date","toLocaleDateString","month","day","time","toLocaleTimeString","hour","minute","toLowerCase","formatTemperature","temperature","toFixed","className","children","timelines","startTime","fileName","_jsxFileName","lineNumber","columnNumber","intervals","values","humidity","windSpeed","_c","$RefreshReg$"],"sources":["C:/Users/FAISA/OneDrive/Desktop/CS336/lab9-FaisalAziz1241/frontend/src/components/Weather/Weather.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Weather.css'; // Make sure you have the CSS file with the necessary styles\r\n\r\nconst Weather = () => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [city, setCity] = useState('');\r\n  const API_KEY = 'NZFg01GFjycMlynXdI9PhAssjfKPnmeA'; // Replace with your actual API key\r\n\r\n  useEffect(() => {\r\n    const fetchWeatherByLocation = async (latitude, longitude) => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://api.tomorrow.io/v4/timelines?location=${latitude},${longitude}&fields=temperature,windSpeed,humidity,weatherCode&timesteps=current&apikey=${API_KEY}`\r\n        );\r\n        setWeatherData(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching weather data:', error);\r\n      }\r\n    };\r\n\r\n    const getLocation = () => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          async (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n            // Fetch city name using reverse geocoding\r\n            try {\r\n              const response = await axios.get(\r\n                `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=YOUR_GOOGLE_MAPS_API_KEY`\r\n              );\r\n              const cityName = response.data.results[0].address_components.find(\r\n                (component) => component.types.includes('locality')\r\n              ).long_name;\r\n              setCity(cityName);\r\n              fetchWeatherByLocation(latitude, longitude);\r\n            } catch (error) {\r\n              console.error('Error fetching city name:', error);\r\n            }\r\n          },\r\n          (error) => {\r\n            console.error('Error getting geolocation:', error);\r\n          }\r\n        );\r\n      } else {\r\n        console.error('Geolocation is not supported by this browser.');\r\n      }\r\n    };\r\n\r\n    getLocation();\r\n  }, []); // Empty dependency array ensures the effect runs only once\r\n\r\n  const formatDateTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return {\r\n      date: `${date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`,\r\n      time: `${date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }).toLowerCase()}`\r\n    };\r\n  };\r\n\r\n  const formatTemperature = (temperature) => {\r\n    return temperature.toFixed(1); // Format temperature to have one decimal place\r\n  };\r\n\r\n  return (\r\n    <div className='weather-card'>\r\n      {weatherData && (\r\n        <div>\r\n          <div className=\"date-time\">\r\n            {/* Assuming you get the timestamp from the API data */}\r\n            <div className=\"date\">{formatDateTime(weatherData.data.timelines[0].startTime).date}</div>\r\n            <div className=\"time\">{formatDateTime(weatherData.data.timelines[0].startTime).time}</div>\r\n          </div>\r\n          <div className=\"temperature\">\r\n            {formatTemperature(weatherData.data.timelines[0].intervals[0].values.temperature)}Â°C\r\n          </div>\r\n          <div className=\"city\">\r\n            {city ? city : 'Your Current Location'}\r\n          </div>\r\n          <div className=\"weather-info\">\r\n            {/* Assuming weatherCode maps correctly to your weather conditions */}\r\n            <div className=\"description\">Overcast</div>\r\n            <div className=\"humidity\">Humidity: {weatherData.data.timelines[0].intervals[0].values.humidity}%</div>\r\n            <div className=\"wind\">Wind: {weatherData.data.timelines[0].intervals[0].values.windSpeed} km/h</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}